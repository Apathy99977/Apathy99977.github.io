<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/06/21/hello-world/"/>
      <url>/2022/06/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Swagger笔记</title>
      <link href="/2022/01/14/Swagger%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/01/14/Swagger%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Swagger"><a href="#Swagger" class="headerlink" title="Swagger"></a>Swagger</h2><h3 id="Swagger简介"><a href="#Swagger简介" class="headerlink" title="Swagger简介"></a>Swagger简介</h3><p>前后端分离</p><ul><li>前端 -&gt; 前端控制层、视图层</li><li>后端 -&gt; 后端控制层、服务层、数据访问层</li><li>前后端通过API进行交互</li><li>前后端相对独立且松耦合</li></ul><p>产生的问题</p><ul><li>前后端集成，前端或者后端无法做到“及时协商，尽早解决”，最终导致问题集中爆发</li></ul><p>解决方案</p><ul><li>首先定义schema [ 计划的提纲 ]，并实时跟踪最新的API，降低集成风险</li></ul><p>Swagger</p><ul><li>号称世界上最流行的API框架</li><li>Restful Api 文档在线自动生成器 &#x3D;&gt; API 文档 与API 定义同步更新</li><li>直接运行，在线测试API</li><li>支持多种语言 （如：Java，PHP等）</li><li>官网：<a href="https://swagger.io/">https://swagger.io/</a></li></ul><h3 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h3><p>SpringBoot集成Swagger &#x3D;&gt; springfox，两个jar包</p><ul><li>Springfox-swagger2 </li><li>swagger-springmvc</li></ul><p>或者在springboot项目中，直接导入一个依赖<strong>springfox-boot-starter（目前最新版本3.0.0）</strong></p><p><strong>使用Swagger 要求</strong>：</p><p>jdk 1.8 + 否则swagger2无法运行</p><p>步骤： </p><ol><li><p>新建一个SpringBoot-web项目 </p></li><li><p>添加Maven依赖</p><ul><li>&#96;&#96;&#96;xml<!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --><dependency>    <groupId>io.springfox</groupId>    <artifactId>springfox-swagger-ui</artifactId>    <version>2.9.2</version></dependency><!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --><dependency>    <groupId>io.springfox</groupId>    <artifactId>springfox-swagger2</artifactId>    <version>2.9.2</version></dependency><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 编写一个配置类-SwaggerConfig来配置 Swagger</span><br><span class="line"></span><br><span class="line">   - ```java</span><br><span class="line">     package com.atapathy.config;</span><br><span class="line">     </span><br><span class="line">     import org.springframework.context.annotation.Configuration;</span><br><span class="line">     import springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line">     </span><br><span class="line">     /**</span><br><span class="line">      * @author Apathy</span><br><span class="line">      * @version 1.0</span><br><span class="line">      * @create 2022-05-26 22:57:48</span><br><span class="line">      */</span><br><span class="line">     @Configuration</span><br><span class="line">     @EnableSwagger2</span><br><span class="line">     public class SwaggerConfig &#123;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>访问测试 ：<a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a> ，可以看到swagger的界面：</p><ul><li><img src="D:\Microservices\SpringBoot\笔记\SpringBoot笔记图片\image-20220526230827868.png" alt="image-20220526230827868"></li></ul></li></ol><h3 id="配置Swagger"><a href="#配置Swagger" class="headerlink" title="配置Swagger"></a>配置Swagger</h3><ol><li><p>Swagger实例Bean是Docket，所以通过配置Docket实例来配置Swaggger</p><ul><li>&#96;&#96;&#96;java<br>&#x2F;&#x2F;配置Swagger的Docket的bean实例<br>@Bean<br>public Docket docket(){<br>return new Docket(DocumentationType.SWAGGER_2);<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 可以通过apiInfo()属性配置文档信息：</span><br><span class="line"></span><br><span class="line">   - ```java</span><br><span class="line">     //配置文档信息</span><br><span class="line">     private ApiInfo apiInfo() &#123;</span><br><span class="line">         Contact contact = new Contact(&quot;联系人名字&quot;, &quot;http://xxx.xxx.com/联系人访问链接&quot;, &quot;联系人邮箱&quot;);</span><br><span class="line">         return new ApiInfo(</span><br><span class="line">                 &quot;Swagger学习&quot;, // 标题</span><br><span class="line">                 &quot;学习演示如何配置Swagger&quot;, // 描述</span><br><span class="line">                 &quot;v1.0&quot;, // 版本</span><br><span class="line">                 &quot;http://terms.service.url/组织链接&quot;, // 组织链接</span><br><span class="line">                 contact, // 联系人信息</span><br><span class="line">                 &quot;Apach 2.0 许可&quot;, // 许可</span><br><span class="line">                 &quot;许可链接&quot;, // 许可连接</span><br><span class="line">                 new ArrayList&lt;&gt;()// 扩展</span><br><span class="line">         );</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Docket 实例关联上 apiInfo()</p><ul><li>&#96;&#96;&#96;java<br>&#x2F;&#x2F;配置Swagger的Docket的bean实例<br>@Bean<br>public Docket docket(){<br>return new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo());<br>}<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 重启项目，访问测试 http://localhost:8080/swagger-ui.html 看下效果：</span><br><span class="line"></span><br><span class="line">   - ![image-20220526235310484](D:\Microservices\SpringBoot\笔记\SpringBoot笔记图片\image-20220526235310484.png)</span><br><span class="line"></span><br><span class="line">### 配置扫描接口</span><br><span class="line"></span><br><span class="line">1. 构建Docket时通过select()方法配置怎么扫描接口</span><br><span class="line"></span><br><span class="line">   - ```java</span><br><span class="line">     @Bean</span><br><span class="line">     public Docket docket() &#123;</span><br><span class="line">     return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">     .apiInfo(apiInfo())</span><br><span class="line">     .select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br><span class="line">     .apis(RequestHandlerSelectors.basePackage(&quot;com.atapathy.controller&quot;))</span><br><span class="line">     .build();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重启项目测试，由于我们配置根据包的路径扫描接口，所以我们只能看到一个类</p><ul><li><img src="D:\Microservices\SpringBoot\笔记\SpringBoot笔记图片\image-20220527003615939.png" alt="image-20220527003615939"></li></ul></li><li><p>除了通过包路径配置扫描接口外，还可以通过配置其他方式扫描接口，以下是所有的配置方式：</p><ul><li><pre><code class="java">any() // 扫描所有，项目中的所有接口都会被扫描到none() // 不扫描接口// 通过方法上的注解扫描，如withMethodAnnotation(GetMapping.class)只扫描get请求withMethodAnnotation(final Class&lt;? extends Annotation&gt; annotation)// 通过类上的注解扫描，如.withClassAnnotation(Controller.class)只扫描有controller注解的类中的接口withClassAnnotation(final Class&lt;? extends Annotation&gt; annotation)basePackage(final String basePackage) // 根据包路径扫描接口<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. 也可以配置接口扫描过滤：</span><br><span class="line"></span><br><span class="line">   - ```java</span><br><span class="line">     @Bean</span><br><span class="line">     public Docket docket() &#123;</span><br><span class="line">     return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">     .apiInfo(apiInfo())</span><br><span class="line">     .select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br><span class="line">     .apis(RequestHandlerSelectors.basePackage(&quot;com.atapathy.controller&quot;))</span><br><span class="line">     // 配置如何通过path过滤,即这里只扫描请求以/atapathy开头的接口</span><br><span class="line">     .paths(PathSelectors.ant(&quot;/atapathy/**&quot;))</span><br><span class="line">     .build();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></code></pre></li><li><p>其他可配置的选项：</p><ul><li>&#96;&#96;&#96;java<br>any() &#x2F;&#x2F; 任何请求都扫描<br>none() &#x2F;&#x2F; 任何请求都不扫描<br>regex(final String pathRegex) &#x2F;&#x2F; 通过正则表达式控制<br>ant(final String antPattern) &#x2F;&#x2F; 通过ant()控制<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">扩展：JAVA链式调用</span><br><span class="line"></span><br><span class="line">### 配置开关Swagger</span><br><span class="line"></span><br><span class="line">通过enable()方法配置是否启用swagger，如果是false，swagger将不能在浏览器中访问了</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">@Bean</span><br><span class="line">public Docket docket() &#123;</span><br><span class="line">return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">.apiInfo(apiInfo())</span><br><span class="line">.enable(false) //配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br><span class="line">.select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br><span class="line">.apis(RequestHandlerSelectors.basePackage(&quot;com.kuang.swagger.controller&quot;))</span><br><span class="line">// 配置如何通过path过滤,即这里只扫描请求以/kuang开头的接口</span><br><span class="line">.paths(PathSelectors.ant(&quot;/kuang/**&quot;))</span><br><span class="line">.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ol><p>思考：如何动态配置启用或者不启用Swagger呢？</p><ol><li><p>先编写一个生产环境和一个测试环境的文件</p><ul><li><p>application-dev.yml</p><ul><li>&#96;&#96;&#96;yaml<br>server:<br>port: 8081<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- application-test.yml</span><br><span class="line"></span><br><span class="line">  - ```yaml</span><br><span class="line">    server:</span><br><span class="line">        port: 8081</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>在主配置文件中启用dev环境</p><ul><li>&#96;&#96;&#96;yaml<br>server:<br>port: 8080<br>spring:<br>profiles:<br>    active: dev<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">3. 编写SwaggerConfig文件：</span><br><span class="line"></span><br><span class="line">   - ```java</span><br><span class="line">         @Bean</span><br><span class="line">         public Docket docket(Environment environment)&#123;</span><br><span class="line">             // 设置要显示swagger的环境</span><br><span class="line">             Profiles profiles = Profiles.of(&quot;dev&quot;);</span><br><span class="line">             // 判断当前是否处于该环境</span><br><span class="line">             // 通过 enable() 接收此参数判断是否要显示</span><br><span class="line">             boolean flag = environment.acceptsProfiles(profiles);</span><br><span class="line">             return new Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                     .apiInfo(apiInfo())</span><br><span class="line">                     .enable(flag) //配置是否启用Swagger，如果是false，在浏览器将无法访问</span><br><span class="line">                     .select()// 通过.select()方法，去配置扫描接口,RequestHandlerSelectors配置如何扫描接口</span><br><span class="line">                     .apis(RequestHandlerSelectors.basePackage(&quot;com.atapathy.controller&quot;</span><br><span class="line">                     ))</span><br><span class="line">                     // 配置如何通过path过滤,即这里只扫描请求以/atapathy开头的接口</span><br><span class="line">        // .paths(PathSelectors.ant(&quot;/atapathy/**&quot;))</span><br><span class="line">                     .build();</span><br><span class="line">     </span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="配置API分组"><a href="#配置API分组" class="headerlink" title="配置API分组"></a>配置API分组</h3><p>如果没有配置分组，默认是default，通过groupName()方法即可配置分组：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(apiInfo())</span><br><span class="line">.groupName(<span class="string">&quot;Gods&quot;</span>) <span class="comment">// 配置分组</span></span><br><span class="line"><span class="comment">// 省略配置....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何配置多个分组？配置多个分组只需要配置多个docket即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置多个分组</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket2</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Docket <span class="title function_">docket3</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动测试：</p><p><img src="D:\Microservices\SpringBoot\笔记\SpringBoot笔记图片\image-20220527011131586.png" alt="image-20220527011131586"></p><h3 id="实体配置"><a href="#实体配置" class="headerlink" title="实体配置"></a>实体配置</h3><ol><li><p>新建一个实体类</p><ul><li><p>&#96;&#96;&#96;java<br>package com.atapathy.pojo;</p><p>import io.swagger.annotations.ApiModel;<br>import io.swagger.annotations.ApiModelProperty;</p><p>&#x2F;**</p><ul><li>@author Apathy</li><li>@version 1.0</li><li>@create 2022-05-27 1:13:34<br> *&#x2F;</li></ul><p>@ApiModel(“用户实体”)<br>public class User {<br>    @ApiModelProperty(“用户名”)<br>    public String username;<br>    @ApiModelProperty(“密码”)<br>    public String password;<br>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. 只要这个实体在请求接口的返回值上（即使是泛型），都能映射到实体项中：</span><br><span class="line"></span><br><span class="line">   - ```java</span><br><span class="line">     @RequestMapping(&quot;/getUser&quot;)</span><br><span class="line">     public User getUser()&#123;</span><br><span class="line">         return new User();</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>重启查看测试</p><ul><li><img src="D:\Microservices\SpringBoot\笔记\SpringBoot笔记图片\image-20220527011546460.png" alt="image-20220527011546460"></li><li>注：并不是因为@ApiModel这个注解让实体显示在这里了，而是只要出现在接口方法的返回值上的实体都会显示在这里，而@ApiModel和@ApiModelProperty这两个注解只是为实体添加注释的：<ul><li>@ApiModel为类添加注释</li><li>@ApiModelProperty为类属性添加注释</li></ul></li></ul></li></ol><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>Swagger的所有注解定义在io.swagger.annotations包下 </p><p>下面列一些经常用到的，未列举出来的可以另行查阅说明：</p><table><thead><tr><th>Swagger注解</th><th>简单说明</th></tr></thead><tbody><tr><td>@Api(tags &#x3D; “xxx模块说明”)</td><td>作用在模块类上</td></tr><tr><td>@ApiOperation(“xxx接口说明”)</td><td>作用在接口方法上</td></tr><tr><td>@ApiModel(“xxxPOJO说明”)</td><td>作用在模型类上：如VO、BO</td></tr><tr><td>@ApiModelProperty(value &#x3D; “xxx属性说 明”,hidden &#x3D; true)</td><td>作用在类方法和属性上，hidden设置为true可 以隐藏该属性</td></tr><tr><td>@ApiParam(“xxx参数说明”)</td><td>作用在参数、方法和字段上，类似 @ApiModelProperty</td></tr></tbody></table><p>总结：</p><ol><li>我们可以通过Swagger给一些比较难理解的属性或者接口，增加注释信息</li><li>接口文档实时更新</li><li>可以在线测试</li></ol><p>Swagger是一个优秀的工具，几乎所有大公司都有使用它<br>注意：在正式发布的时候，记得关闭Swagger! ! !（主要出于安全考虑，还有就是可以节省运行的内存;）</p><h3 id="扩展：自定义其他皮肤"><a href="#扩展：自定义其他皮肤" class="headerlink" title="扩展：自定义其他皮肤"></a>扩展：自定义其他皮肤</h3><p>可以导入不同的包实现不同的皮肤定义：</p><ol><li><p>默认的 访问 <a href="http://localhost:8080/swagger-ui.html">http://localhost:8080/swagger-ui.html</a></p><ul><li>&#96;&#96;&#96;xml<dependency>    <groupId>io.springfox</groupId>    <artifactId>springfox-swagger-ui</artifactId>    <version>2.9.2</version></dependency><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. bootstrap-ui 访问 http://localhost:8080/doc.html</span><br><span class="line"></span><br><span class="line">   - ```xml</span><br><span class="line">     &lt;!-- 引入swagger-bootstrap-ui包 /doc.html--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;swagger-bootstrap-ui&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.9.1&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Layui-ui 访问 <a href="http://localhost:8080/docs.html">http://localhost:8080/docs.html</a></p><ul><li>&#96;&#96;&#96;xml<!-- 引入swagger-ui-layer包 /docs.html--><dependency>    <groupId>com.github.caspar-chen</groupId>    <artifactId>swagger-ui-layer</artifactId>    <version>1.1.3</version></dependency><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">4. mg-ui 访问 http://localhost:8080/document.html</span><br><span class="line"></span><br><span class="line">   - ```xml</span><br><span class="line">     &lt;!-- 引入swagger-ui-layer包 /document.html--&gt;</span><br><span class="line">     &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.zyplayer&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;swagger-mg-ui&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;1.0.6&lt;/version&gt;</span><br><span class="line">     &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
